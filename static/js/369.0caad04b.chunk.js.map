{"version":3,"file":"static/js/369.0caad04b.chunk.js","mappings":"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","sources":["webpack://my-app1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app1/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"photoBlock\":\"ProfileInfo_photoBlock__HpWgz\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rQo20\",\"userPhoto\":\"ProfileInfo_userPhoto__wxBp2\",\"profileBlock\":\"ProfileInfo_profileBlock__7+UG8\",\"contact\":\"ProfileInfo_contact__REoC8\",\"buttonCancel\":\"ProfileInfo_buttonCancel__bWPK3\"};","//\r\nimport React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype PropsType = {\r\n   status: string\r\n   updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n   let [editMode, setEditMode] = useState(false)\r\n   let [status, setStatus] = useState(props.status)\r\n\r\n   useEffect(() => {\r\n      setStatus(props.status)\r\n   }, [props.status])\r\n\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode(true)\r\n   }\r\n\r\n   const deActivateEditMode = () => {\r\n      setEditMode(false)\r\n      props.updateStatus(status)\r\n   }\r\n\r\n   const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n      setStatus(e.currentTarget.value)\r\n   }\r\n\r\n   return (\r\n      <div>\r\n\r\n         {!editMode &&\r\n         <div>\r\n            <b>Status</b><span>: </span>\r\n            <span onDoubleClick={activateEditMode}>\r\n               {props.status}\r\n            </span>\r\n         </div>\r\n         }\r\n\r\n         {editMode &&\r\n         <div>\r\n            <input\r\n               autoFocus={true}\r\n               onBlur={deActivateEditMode}\r\n               onChange={onStatusChange}\r\n               value={status}\r\n            />\r\n         </div>\r\n         }\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks\r\n\r\n","import React from 'react'\r\nimport {ErrorMessageWrapper} from '../../../utils/validators/validators'\r\nimport {ErrorMessage, Field, FieldArray, Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Style from './ProfileInfo.module.css'\r\nimport StyleVal from '../../../utils/validators/ErrorMessage.module.css'\r\nimport {ProfileType} from '../../../types/types'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n\r\n   fullName: Yup.string()\r\n      .min(2, 'Must be longer than 2 characters !')\r\n      .max(25, 'Must be shorter than 5 characters !')\r\n      .required('Required !'),\r\n\r\n   lookingForAJobDescription: Yup.string()\r\n      .min(2, 'Must be longer than 2 characters !')\r\n      .max(50, 'Must be shorter than 5 characters !')\r\n      .required('Required !'),\r\n\r\n   aboutMe: Yup.string()\r\n      .min(2, 'Must be longer than 2 characters !')\r\n      .max(50, 'Must be shorter than 5 characters !')\r\n      .required('Required !')\r\n\r\n})\r\n\r\nlet contactsJsx = (name: string) => {\r\n   return (\r\n      <div key={name} className={Style.contact}>\r\n         <div>\r\n            <b>{name}</b>:\r\n         </div>\r\n\r\n         <div>\r\n            <Field\r\n               name={`contacts.${name}`}\r\n               type={'text'}\r\n               id={name}\r\n               placeholder={name}\r\n            />\r\n         </div>\r\n      </div>)\r\n}\r\n\r\ntype PropsType = {\r\n   profile: ProfileType\r\n   handleSubmit: (formData: ProfileType, setStatus: any,\r\n                  setSubmitting: any, goToViewMode: any) => void\r\n   goToViewMode: any\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType> = (props) => {\r\n\r\n   let {profile, handleSubmit, goToViewMode} = props\r\n\r\n   let objectFromApiCopy = JSON.parse(JSON.stringify(profile))\r\n\r\n   const arrayWithNames = Object.keys(profile.contacts)\r\n\r\n   arrayWithNames.forEach((item) => {\r\n      let value = objectFromApiCopy.contacts[item]\r\n      if (value === null) {\r\n         objectFromApiCopy.contacts[item] = ''\r\n      }\r\n   })\r\n\r\n\r\n   return (\r\n      <div>\r\n\r\n         <div>\r\n            ...\r\n         </div>\r\n\r\n         <Formik\r\n            initialValues={objectFromApiCopy}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, bagWithMethods) => {\r\n               let {setStatus, setSubmitting} = bagWithMethods\r\n\r\n               handleSubmit(values, setStatus, setSubmitting, goToViewMode)\r\n            }}\r\n         >\r\n            {(propsF) => {\r\n\r\n               let {status, isSubmitting} = propsF\r\n\r\n               return (\r\n                  <Form>\r\n\r\n                     <div>\r\n                        <Field\r\n                           name={'fullName'}\r\n                           type={'text'}\r\n                           placeholder={'Full name'}\r\n                        />\r\n                     </div>\r\n                     <ErrorMessage name=\"fullName\">\r\n                        {ErrorMessageWrapper}\r\n                     </ErrorMessage>\r\n\r\n                     <div>< br /></div>\r\n\r\n                     <div>\r\n                        <Field\r\n                           name={'lookingForAJob'}\r\n                           type={'checkbox'}\r\n                           id='lookingForAJob' />\r\n                        <label htmlFor={'lookingForAJob'}>\r\n                           <b> Looking for a job</b> </label>\r\n                     </div>\r\n\r\n                     <div>< br /></div>\r\n\r\n                     <div>\r\n                        <Field\r\n                           name={'lookingForAJobDescription'}\r\n                           as={'textarea'}\r\n                           placeholder={'My professional skills'}\r\n                        />\r\n                     </div>\r\n                     <ErrorMessage name=\"lookingForAJobDescription\">\r\n                        {ErrorMessageWrapper}\r\n                     </ErrorMessage>\r\n\r\n                     <div>< br /></div>\r\n\r\n                     <div>\r\n                        <Field\r\n                           name={'aboutMe'}\r\n                           as={'textarea'}\r\n                           placeholder={'About me'}\r\n                        />\r\n                     </div>\r\n                     <ErrorMessage name=\"aboutMe\">\r\n                        {ErrorMessageWrapper}\r\n                     </ErrorMessage>\r\n\r\n                     <div>< br /></div>\r\n\r\n                     <div>\r\n                        <b>Contacts</b>:\r\n                     </div>\r\n\r\n                     <FieldArray\r\n                        name=\"friends\"\r\n                        render={() => (\r\n                           <div>\r\n                              {arrayWithNames.map(name => contactsJsx(name))}\r\n                           </div>\r\n                        )}\r\n                     />\r\n\r\n                     <div>< br /></div>\r\n\r\n                     {status &&\r\n                     <div className={StyleVal.validationErrorMessage}>\r\n                        <b> ..{status} - with setStatus </b>\r\n                     </div>}\r\n\r\n                     <button type={'submit'}\r\n                             disabled={isSubmitting}\r\n                     >{isSubmitting ? 'Please wait...' : 'Save'}\r\n                     </button>\r\n\r\n                     <button onClick={goToViewMode}\r\n                             type={'button'}\r\n                             className={Style.buttonCancel}> Cancel\r\n                     </button>\r\n\r\n                  </Form>\r\n               )\r\n            }}\r\n         </Formik>\r\n\r\n\r\n         <div>\r\n            ...\r\n         </div>\r\n\r\n         <div>\r\n            < br />\r\n         </div>\r\n\r\n\r\n      </div>)\r\n}\r\n\r\nexport default ProfileDataForm\r\n","import s from './ProfileInfo.module.css'\r\nimport styles from './ProfileInfo.module.css'\r\nimport React, {ChangeEvent, useState} from 'react'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\n\r\nexport type ProfileInfoPropsType = {\r\n\r\n   profile: ProfileType\r\n   status: string\r\n   updateStatus: (status: string) => void\r\n   isOwner: boolean\r\n   savePhoto: (photoFile: File) => void\r\n   saveProfile: (formData: ProfileType, setStatus: any,\r\n                 setSubmitting: any, goToViewMode: any) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n\r\n   let [editMode, setEditMode] = useState(false)\r\n\r\n   let {profile, saveProfile} = props\r\n\r\n\r\n   if (!profile) {\r\n      return <Preloader />\r\n   }\r\n\r\n   let alt_descriptionBlock = `photo_${profile.userId}`\r\n\r\n   const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n\r\n      if (event.target.files?.length) {\r\n         props.savePhoto(event.target.files[0])\r\n      }\r\n   }\r\n\r\n   const handleSubmit = (formData: ProfileType, setStatus: any,\r\n                         setSubmitting: any, goToViewMode: any) => {\r\n\r\n      saveProfile(formData, setStatus, setSubmitting, goToViewMode)\r\n\r\n   }\r\n\r\n\r\n   return (\r\n      <div>\r\n\r\n         <div className={s.photoBlock}>\r\n            <img src='https://html5css.ru/css/img_forest.jpg' alt='photo555' />\r\n         </div>\r\n\r\n         <div className={s.descriptionBlock}>\r\n\r\n            <img src={profile.photos.small !== null\r\n               ? profile.photos.small\r\n               : userPhoto}\r\n                 className={styles.userPhoto}\r\n                 alt={alt_descriptionBlock}\r\n            />\r\n\r\n            ...Avatar - {profile.fullName} - userId - {profile.userId}\r\n\r\n            <div>\r\n               {props.isOwner\r\n               &&\r\n               <input\r\n                  type={'file'}\r\n                  onChange={onMainPhotoSelected}\r\n               />}\r\n            </div>\r\n\r\n\r\n            <div className={styles.profileBlock}>\r\n\r\n               {editMode\r\n                  ? <ProfileDataForm profile={profile}\r\n                                     handleSubmit={handleSubmit}\r\n                                     goToViewMode={\r\n                                        () => setEditMode(false)} />\r\n                  : <ProfileData profile={profile}\r\n                                 isOwner={props.isOwner}\r\n                                 goToEditMode={\r\n                                    () => setEditMode(true)} />}\r\n\r\n               <ProfileStatusWithHooks\r\n                  status={props.status}\r\n                  updateStatus={props.updateStatus} />\r\n\r\n            </div>\r\n\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n\r\n   profile: ProfileType\r\n   isOwner: boolean\r\n   goToEditMode: () => void\r\n\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n   return (\r\n      <div>\r\n\r\n         <div>\r\n            {isOwner &&\r\n            <button onClick={goToEditMode}>Edit</button>\r\n            }\r\n         </div>\r\n\r\n         <div>\r\n            <b> Full name</b>: {profile.fullName}\r\n         </div>\r\n\r\n         <div>\r\n            <b> Looking for a job</b>: {profile.lookingForAJob\r\n            ? 'yes' : 'no'}\r\n         </div>\r\n\r\n         {profile.lookingForAJob &&\r\n         <div>\r\n            <b> My professional skills</b>: {profile.lookingForAJobDescription}\r\n         </div>}\r\n\r\n         <div>\r\n            <b> About me</b>: {profile.aboutMe}\r\n         </div>\r\n\r\n         <div>\r\n            <b> Contacts</b>:\r\n            {Object.keys(profile.contacts).map(key => {\r\n               return <Contacts\r\n                  key={key}\r\n                  contactTitle={key}\r\n                  contactValue={profile.contacts[key as keyof ContactsType]} />\r\n            })}\r\n         </div>\r\n\r\n      </div>)\r\n}\r\n\r\ntype ContactsPropsType = {\r\n   contactTitle: string\r\n   contactValue: string\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n\r\n   return (\r\n      <div className={styles.contact}>\r\n         <b> {contactTitle}</b>: {contactValue}\r\n      </div>)\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__tpHam\",\"posts\":\"MyPosts_posts__sKDcq\",\"text_h3\":\"MyPosts_text_h3__wvADx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__C5ylc\"};","//\r\nimport s from './Post.module.css'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n   value: string\r\n   likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n   return (\r\n\r\n      <div className={s.item}>\r\n         <img\r\n            src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ4AuCaCDS8eeLRXGL0pFD9cIddYuHc8AJoSA&usqp=CAU'\r\n            alt={'Post-illustration'}\r\n         />\r\n         ... {props.value}\r\n         <div>\r\n            Like {props.likesCount}\r\n         </div>\r\n      </div>\r\n\r\n   )\r\n}\r\n\r\nexport default Post","//\r\nimport React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Posts/Post'\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport {ErrorMessageWrapper} from '../../../utils/validators/validators'\r\nimport {PostType} from '../../../types/types'\r\n\r\nexport type MapMyPostsPropsType = {\r\n   posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchMyPostsPropsType = {\r\n   addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapMyPostsPropsType & DispatchMyPostsPropsType> = props => {\r\n\r\n   // тут reverse - для теста\r\n   let postsElement =\r\n      [...props.posts]\r\n         .reverse()\r\n         .map(p => <Post value={p.message} likesCount={p.likesCount} key={p.id} />)\r\n\r\n   return (\r\n      <div className={s.postsBlock}>\r\n\r\n         <h3 className={s.text_h3}>\r\n            My posts:\r\n         </h3>\r\n\r\n         <AddNewPostForm\r\n            addPost={props.addPost}\r\n         />\r\n\r\n         <div className={s.posts}>\r\n            {postsElement}\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\ntype AddNewPostFormPropsType = {\r\n   addPost: (newPostText: string) => void\r\n}\r\n\r\nconst AddNewPostForm: React.FC<AddNewPostFormPropsType> = (props) => {\r\n\r\n   const validationSchema = Yup.object().shape({\r\n\r\n      newPostText: Yup.string()\r\n         .min(2, 'Must be longer than 2 characters !')\r\n         .max(5, 'Must be shorter than 5 characters !')\r\n         .required('Required !')\r\n   })\r\n\r\n   const OnAddPost = (values: string) => {\r\n      props.addPost(values)\r\n   }\r\n\r\n   return (\r\n      <Formik\r\n         initialValues={{\r\n            newPostText: ''\r\n         }}\r\n         validationSchema={validationSchema}\r\n         onSubmit={(values, {resetForm}) => {\r\n            OnAddPost(values.newPostText)\r\n            resetForm()\r\n         }}\r\n      >\r\n         {() => (\r\n            <Form>\r\n               <div>\r\n                  <Field\r\n                     name={'newPostText'}\r\n                     as={'textarea'}\r\n                     placeholder={'enter text 1'}\r\n                  />\r\n               </div>\r\n\r\n               <ErrorMessage name=\"newPostText\">\r\n                  {ErrorMessageWrapper}\r\n               </ErrorMessage>\r\n\r\n               <button type={'submit'}>Add posts</button>\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   )\r\n}\r\n\r\n\r\nexport default MyPosts\r\n\r\n\r\n//region Description\r\n// так было раньше без формика\r\n//let newPostElement = React.createRef()\r\n\r\n// let OnAddPost = () => {\r\n//    props.addPost();\r\n// }\r\n//\r\n//\r\n// let onPostChange = () => {\r\n//    let text = newPostElement.current.value;\r\n//    props.updateNewPostText( text );\r\n// }\r\n\r\n// <div>\r\n//    <textarea ref={newPostElement}\r\n//              onChange={onPostChange}\r\n//              value={props.newPostText} />\r\n// </div>\r\n//\r\n// <div>\r\n//    <button onClick={OnAddPost}> Add posts\r\n//    </button>\r\n// </div>\r\n\r\n// let postsElement =\r\n//    props.posts.map( p => <Post value={p.message} likesCount={p.likesCount} key={p.id} /> );\r\n//endregion","//\r\nimport {connect} from 'react-redux'\r\nimport {actions} from '../../../redux/profile-reducer'\r\nimport MyPosts, {DispatchMyPostsPropsType, MapMyPostsPropsType} from './MyPosts'\r\nimport {AppStateGlobalType} from '../../../redux/redux-store'\r\n\r\n\r\nlet mapStateToProps = (state: AppStateGlobalType) => {\r\n   return {\r\n      posts: state.profilePage.posts\r\n   }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapMyPostsPropsType,\r\n   DispatchMyPostsPropsType, {}, AppStateGlobalType>(mapStateToProps,\r\n   {\r\n      addPost: actions.addPostActionCreator\r\n   })(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n\r\n\r\n//region Description\r\n// const MyPostsContainer = () => {\r\n//\r\n//    return (\r\n//       <StoreContext_Non.Consumer>{\r\n//\r\n//          (store) => {\r\n//\r\n//             let state = store.getState();\r\n//\r\n//             let addPost = () => {\r\n//                store.dispatch( addPostActionCreator() );\r\n//             }\r\n//\r\n//             let onPostChange = (text) => {\r\n//                let action = updateNewPostTextActionCreator( text );\r\n//                store.dispatch( action );\r\n//             }\r\n//\r\n//             return (\r\n//                <MyPosts posts={state.profilePage.posts}\r\n//                         addPost={addPost}\r\n//                         updateNewPostText={onPostChange}\r\n//                         newPostText={state.profilePage.newPostText}\r\n//                />\r\n//             )\r\n//\r\n//          }\r\n//\r\n//       }\r\n//\r\n//       </StoreContext_Non.Consumer>\r\n//\r\n//    )\r\n// }\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//\r\n//    return {\r\n//\r\n//       addPost: (newPostText) => {\r\n//          dispatch( actions.addPostActionCreator( newPostText ) )\r\n//       }\r\n//    }\r\n// }\r\n//endregion\r\n\r\n","//\r\nimport React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport {ProfileType} from '../../types/types'\r\n\r\n\r\ntype PropsType = {\r\n   profile: ProfileType\r\n   status: string\r\n   updateStatus: (status: string) => void\r\n   isOwner: boolean\r\n   savePhoto: (photoFile: File) => void\r\n   saveProfile: (formData: ProfileType, setStatus: any,\r\n                 setSubmitting: any, goToViewMode: any) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n   return (\r\n      <div>\r\n         <ProfileInfo\r\n            {...props}\r\n         />\r\n         <MyPostsContainer\r\n         />\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Profile\r\n\r\n","//\r\nimport React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n   getStatus,\r\n   getUserProfile,\r\n   savePhoto,\r\n   saveProfile,\r\n   updateStatus\r\n} from '../../redux/profile-reducer'\r\nimport {useLocation, useNavigate, useParams} from 'react-router-dom'\r\nimport {compose} from 'redux'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {AppStateGlobalType} from '../../redux/redux-store'\r\nimport {ProfileType} from '../../types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n   getUserProfile: (userId: number) => void\r\n   getStatus: (userId: number) => void\r\n   updateStatus: (status: string) => void\r\n   savePhoto: (photoFile: File) => void\r\n   saveProfile: (formData: ProfileType, setStatus: any,\r\n                 setSubmitting: any, goToViewMode: any) => void\r\n   router: any\r\n   profile: any\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType\r\n\r\ntype LocalStateType = { isShowMyProfile: boolean }\r\n\r\nclass ProfileContainer extends React.Component<PropsType, LocalStateType> {\r\n   constructor(props: PropsType) {\r\n      super(props)\r\n      this.state = {\r\n         isShowMyProfile: true\r\n      }\r\n   }\r\n\r\n\r\n   componentDidMount() {\r\n\r\n      let userIdFromPath = +this.props.router.params.userId\r\n      let authorisedUserId = this.props.authorisedUserId\r\n\r\n      if (userIdFromPath) {\r\n         //userId = 2;\r\n         //userId = 23275;\r\n         this.props.getUserProfile(userIdFromPath)\r\n         this.props.getStatus(userIdFromPath)\r\n\r\n      } else {\r\n\r\n         if (this.props.isAuth && authorisedUserId) {\r\n            this.props.getUserProfile(authorisedUserId)\r\n            this.props.getStatus(authorisedUserId)\r\n         }\r\n      }\r\n   }\r\n\r\n   componentDidUpdate(prevProps: PropsType & LocalStateType, prevState: PropsType & LocalStateType) {\r\n\r\n      let userIdFromPath = +this.props.router.params.userId\r\n      let authorisedUserId = this.props.authorisedUserId\r\n      let isShowMyProfile = this.state.isShowMyProfile\r\n\r\n      if (isShowMyProfile) {\r\n\r\n         if (userIdFromPath === authorisedUserId) {\r\n            this.setState({isShowMyProfile: false})\r\n         }\r\n\r\n         if (!userIdFromPath && this.props.isAuth && authorisedUserId) {\r\n            this.props.getUserProfile(authorisedUserId)\r\n            this.props.getStatus(authorisedUserId)\r\n            this.setState({isShowMyProfile: false})\r\n         }\r\n      }\r\n   }\r\n\r\n\r\n   render() {\r\n\r\n      if (!this.props.isAuth && !this.props.router.params.userId) {\r\n         return <Navigate to={'/login'} />\r\n      }\r\n\r\n      let userIdFromPath = +this.props.router.params.userId\r\n      let authorisedUserId = this.props.authorisedUserId\r\n\r\n\r\n      let isOwner = false\r\n      if (!userIdFromPath && this.props.isAuth) {\r\n         isOwner = true\r\n      } else if (userIdFromPath === authorisedUserId) {\r\n         isOwner = true\r\n      }\r\n\r\n\r\n      return (\r\n         <div>\r\n            <Profile\r\n               profile={this.props.profile}\r\n               status={this.props.status}\r\n               updateStatus={this.props.updateStatus}\r\n               isOwner={isOwner}\r\n               savePhoto={this.props.savePhoto}\r\n               saveProfile={this.props.saveProfile}\r\n            />\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\n\r\n// wrapper to use react router's v6 hooks in class component (to use HOC pattern, like in router v5)\r\nfunction withRouter(Component: any) {\r\n\r\n   function ComponentWithRouterProp(props: any) {\r\n      let location = useLocation()\r\n      let navigate = useNavigate()\r\n      let params = useParams()\r\n\r\n      return <Component\r\n         {...props}\r\n         router={{location, navigate, params}} />\r\n   }\r\n\r\n   return ComponentWithRouterProp\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateGlobalType) => {\r\n\r\n\r\n   return {\r\n      profile: state.profilePage.profile,\r\n      status: state.profilePage.status,\r\n      authorisedUserId: state.auth.id,\r\n      isAuth: state.auth.isAuth\r\n   }\r\n}\r\n\r\n\r\nconst ProfileContainerCompose = compose<React.ComponentType>(\r\n   withRouter,\r\n   connect(mapStateToProps,\r\n      {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile})\r\n)(ProfileContainer)\r\n\r\nexport default ProfileContainerCompose\r\n\r\n\r\n//region Description\r\n//fake: state.usersPage.fake\r\n\r\n//setTimeout( () => {\r\n//this.props.getStatus( userId );\r\n//}, 2000 )\r\n\r\n// так было без compose\r\n//let AuthRedirectComponent = WithAuthRedirect( ProfileContainer );\r\n//\r\n// export default connect( mapStateToProps, {\r\n//    getUserProfile\r\n// } )( withRouter( AuthRedirectComponent ) );\r\n\r\n// так было без хок функции общей\r\n// let AuthRedirectComponent = (props) => {\r\n//\r\n//    if (!props.isAuth) {\r\n//       return <Navigate to={'/login'} />\r\n//    }\r\n//    return <ProfileContainer {...props} />\r\n// }\r\n\r\n// так было без withRouter\r\n// export default connect( mapStateToProps, {\r\n//    setUserProfile\r\n// } )( ProfileContainer );\r\n\r\n// <Profile {...this.props} - это нужно что бы то что идет сверху\r\n// не потерялось\r\n// {/*можно и не передавать оно вроде как автоматом прокидывается */}\r\n\r\n// if (!this.props.isAuth) {\r\n//    return <Navigate to={'/login'} />\r\n// }\r\n//endregion\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","validationSchema","Yup","shape","fullName","min","max","required","lookingForAJobDescription","aboutMe","profile","handleSubmit","goToViewMode","objectFromApiCopy","JSON","parse","stringify","arrayWithNames","Object","keys","contacts","forEach","item","initialValues","onSubmit","values","bagWithMethods","setSubmitting","propsF","isSubmitting","name","type","placeholder","ErrorMessageWrapper","id","htmlFor","as","render","map","className","Style","contactsJsx","StyleVal","disabled","onClick","ProfileData","isOwner","goToEditMode","lookingForAJob","key","Contacts","contactTitle","contactValue","styles","saveProfile","Preloader","alt_descriptionBlock","userId","s","src","alt","photos","small","userPhoto","event","target","files","length","savePhoto","formData","likesCount","AddNewPostForm","newPostText","resetForm","addPost","OnAddPost","postsElement","posts","reverse","p","message","connect","state","profilePage","actions","MyPosts","ProfileContainer","isShowMyProfile","userIdFromPath","this","router","params","authorisedUserId","getUserProfile","getStatus","isAuth","prevProps","prevState","setState","to","React","compose","Component","location","useLocation","navigate","useNavigate","useParams","auth"],"sourceRoot":""}