{"version":3,"file":"static/js/264.8c135f23.chunk.js","mappings":"sLACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yB,mBCWhL,EARoB,SAACA,GAClB,OACG,gBAAKC,UAAWC,EAAhB,UACG,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCErD,EANgB,SAACL,GACd,OACG,iBAAKC,UAAWC,EAAhB,gBAA+BF,EAAMM,Y,uCCwCrCC,EAAiB,SAACP,GAErB,IAAMQ,EAAmBC,EAAAA,KAAaC,MAAO,CAE1CC,eAAgBF,EAAAA,KACZG,IAAK,EAAG,sCACRC,IAAK,EAAG,uCACRC,SAAU,gBASjB,OACG,SAAC,KAAD,CACGC,cAAe,CACZJ,eAAgB,IAEnBH,iBAAkBA,EAClBQ,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,WAZJ,SAACD,GAEpBjB,EAAMmB,YAAaF,GAWbG,CAAeH,EAAON,gBACtBO,EAAW,CAACD,OAAQ,MAP1B,SAUI,kBACE,UAAC,KAAD,YACG,0BACG,SAAC,KAAD,CACGZ,KAAM,iBACNgB,GAAI,WACJC,YAAa,oBAGnB,SAAC,KAAD,CAAcjB,KAAK,iBAAnB,SACIkB,EAAAA,KAGJ,mBAAQC,KAAM,SAAd,yBAOf,EAjFgB,SAACxB,GAEd,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAiBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAazB,KAAMyB,EAAEzB,KAAMD,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAErF2B,EAAkBN,EAAMO,SAASH,KAAK,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,SAAc2B,EAAE7B,OAGnF,OAAKJ,EAAMkC,QAMR,iBAAKjC,UAAWC,EAAhB,WAEG,gBAAKD,UAAWC,EAAhB,SACIyB,KAGJ,iBAAK1B,UAAWC,EAAhB,WAEG,yBAAM6B,KAEN,SAACxB,EAAD,CAAgBY,YAAanB,EAAMmB,qBAflC,SAAC,KAAD,CAAUhB,GAAI,Y,iDCfvBgC,EAA6B,SAACV,GAC/B,MAAO,CACJS,OAAQT,EAAMW,KAAKF,SCkBnBG,GAAmBC,E,QAAAA,KACtBC,EAAAA,EAAAA,KAPmB,SAACd,GACpB,MAAO,CACJC,YAAaD,EAAMC,gBAbA,SAACc,GAEvB,MAAO,CAEJrB,YAAa,SAACR,GACX6B,GAAUC,EAAAA,EAAAA,GAAoB9B,UDDP,SAAC+B,GAAe,IAEvCC,EAFsC,0IAIzC,WAEG,OAAKC,KAAK5C,MAAMkC,QAIT,SAACQ,GAAD,UAAeE,KAAK5C,SAHjB,SAAC,KAAD,CAAUG,GAAI,eAPc,GAEZ0C,EAAAA,WAchC,OAAON,EAAAA,EAAAA,IAASJ,EAATI,CAAuCI,KCHxBL,CAGtBQ,GAEH","sources":["webpack://my-app1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItems/DialogItems.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qmkvT\",\"dialogsItems\":\"Dialogs_dialogsItems__QM0vS\",\"dialog\":\"Dialogs_dialog__2wck7\",\"massages\":\"Dialogs_massages__Ee1oJ\",\"massage\":\"Dialogs_massage__9KQWt\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItems = (props) => {\r\n   return (\r\n      <div className={s.dialog}>\r\n         <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default DialogItems;\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n   return (\r\n      <div className={s.massage}>.. {props.message}</div>\r\n   )\r\n}\r\n\r\nexport default Message;","//\r\nimport React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport {ErrorMessageWrapper} from \"../../utils/validators/validators\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n   let state = props.dialogsPage;\r\n\r\n   let dialogsElement = state.sidebar.map( d => <DialogItems name={d.name} id={d.id} key={d.id} /> );\r\n\r\n   let messagesElement = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n\r\n   if (!props.isAuth) {\r\n      return <Navigate to={'/login'} />\r\n   }\r\n\r\n\r\n   return (\r\n      <div className={s.dialogs}>\r\n\r\n         <div className={s.dialogsItems}>\r\n            {dialogsElement}\r\n         </div>\r\n\r\n         <div className={s.massages}>\r\n\r\n            <div>{messagesElement}</div>\r\n\r\n            <AddMassageForm sendMessage={props.sendMessage} />\r\n\r\n         </div>\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nconst AddMassageForm = (props) => {\r\n\r\n   const validationSchema = Yup.object().shape( {\r\n\r\n      newMessageBody: Yup.string()\r\n         .min( 2, \"Must be longer than 2 characters !\" )\r\n         .max( 5, \"Must be shorter than 5 characters !\" )\r\n         .required( \"Required !\" )\r\n   } );\r\n\r\n   const addNewMessage = (values) => {\r\n\r\n      props.sendMessage( values );\r\n\r\n   }\r\n\r\n   return (\r\n      <Formik\r\n         initialValues={{\r\n            newMessageBody: \"\"\r\n         }}\r\n         validationSchema={validationSchema}\r\n         onSubmit={(values, {resetForm}) => {\r\n            addNewMessage( values.newMessageBody );\r\n            resetForm( {values: ''} );\r\n         }}\r\n      >\r\n         {() => (\r\n            <Form>\r\n               <div>\r\n                  <Field\r\n                     name={'newMessageBody'}\r\n                     as={'textarea'}\r\n                     placeholder={'enter text 2'}\r\n                  />\r\n               </div>\r\n               <ErrorMessage name=\"newMessageBody\">\r\n                  {ErrorMessageWrapper}\r\n               </ErrorMessage>\r\n\r\n               <button type={'submit'}>Send</button>\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n// так было раньше без формика\r\n// onSubmit={(values) =>\r\n// addNewMessage( values )\r\n//\r\n// <div>\r\n//    <div>\r\n//                   <textarea value={newMessageBody}\r\n//                             onChange={onSendMessageChange}\r\n//                             placeholder='enter text'>\r\n//                   </textarea>\r\n//    </div>\r\n//\r\n//    <div>\r\n//       <button onClick={onSendMessageClick}>Send</button>\r\n//    </div>\r\n// </div>\r\n//\r\n// let onSendMessageClick = () => {\r\n//    props.sendMessage();\r\n// }\r\n//\r\n// если занулить не все нужно до делаем так\r\n// resetForm( {\r\n//    values: {\r\n//       newMessageBody: ''\r\n//    }\r\n// } )\r\n","//\r\nimport React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n   return {\r\n      isAuth: state.auth.isAuth\r\n   }\r\n}\r\n\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n   class RedirectComponent extends React.Component {\r\n\r\n      render() {\r\n\r\n         if (!this.props.isAuth) {\r\n            return <Navigate to={'/login'} />\r\n         }\r\n\r\n         return <Component {...this.props} />\r\n\r\n      }\r\n   }\r\n\r\n\r\n   return connect( mapStateToPropsForRedirect )( RedirectComponent );\r\n\r\n}\r\n\r\n\r\n// это полный код для понимания но оно ругается на избыточную переменную\r\n// let ConnectedAuthRedirectComponent = connect( mapStateToPropsForRedirect )( RedirectComponent );\r\n// return ConnectedAuthRedirectComponent;\r\n\r\n// или внутреннюю функцию можно функциональную сделать\r\n\r\n// такая короткая запись была\r\n// let mapStateToPropsForRedirect = (state) => ({\r\n//    isAuth: state.auth.isAuth\r\n// })\r\n\r\n","//\r\n//import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {WithAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\r\n   return {\r\n\r\n      sendMessage: (newMessageBody) => {\r\n         dispatch( sendMessageCreator( newMessageBody ) );\r\n\r\n      }\r\n   }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n   return {\r\n      dialogsPage: state.dialogsPage,\r\n   }\r\n}\r\n\r\nconst DialogsContainer = compose(\r\n   connect( mapStateToProps, mapDispatchToProps ),\r\n   WithAuthRedirect\r\n)( Dialogs )\r\n\r\nexport default DialogsContainer;\r\n\r\n\r\n// так было без compose\r\n//let AuthRedirectComponent = WithAuthRedirect( Dialogs );\r\n//\r\n// const DialogsContainer = connect( mapStateToProps, mapDispatchToProps )( AuthRedirectComponent );\r\n\r\n// так было без хок функции общей\r\n// let AuthRedirectComponent = (props) => {\r\n//\r\n//    if (!props.isAuth) {\r\n//       return <Navigate to={'/login'} />\r\n//    }\r\n//    return <Dialogs {...props} />\r\n// }\r\n\r\n// можно так сделать - как по мне так более понятнее\r\n// или как Дима сразу засунуть в сф\r\n// let onSendMessageClick = () => {\r\n//    dispatch( sendMessageCreator() )\r\n// }\r\n// в ретурне это\r\n// updateNewMessageBody: (body) => {\r\n//    dispatch( updateNewMessageBodyCreator( body ) );\r\n// },\r\n//sendMessage: onSendMessageClick\r\n\r\n// const DialogsContainer_Old = () => {\r\n//\r\n//    return (\r\n//\r\n//       <StoreContext_Non.Consumer>{\r\n//          (store) => {\r\n//\r\n//             let state = store.getState().dialogsPage;\r\n//\r\n//             let onSendMessageChange = (body) => {\r\n//                store.dispatch( updateNewMessageBodyCreator( body ) )\r\n//             }\r\n//\r\n//             let onSendMessageClick = () => {\r\n//                store.dispatch( sendMessageCreator() )\r\n//             }\r\n//\r\n//             return (\r\n//                <Dialogs\r\n//                   updateNewMessageBody={onSendMessageChange}\r\n//                   sendMessage={onSendMessageClick}\r\n//                   dialogsPage={state}\r\n//                />\r\n//             )\r\n//          }\r\n//       }\r\n//       </StoreContext_Non.Consumer>\r\n//    )\r\n// }\r\n"],"names":["props","className","s","to","id","name","message","AddMassageForm","validationSchema","Yup","shape","newMessageBody","min","max","required","initialValues","onSubmit","values","resetForm","sendMessage","addNewMessage","as","placeholder","ErrorMessageWrapper","type","state","dialogsPage","dialogsElement","sidebar","map","d","messagesElement","messages","m","isAuth","mapStateToPropsForRedirect","auth","DialogsContainer","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}