{"version":3,"file":"static/js/466.6c28fef8.chunk.js","mappings":"qLACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yB,mBCkBhL,EARyC,SAACA,GACvC,OACG,gBAAKC,UAAWC,EAAhB,UACG,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCFrD,EANqC,SAACL,GACnC,OACG,iBAAKC,UAAWC,EAAhB,gBAA+BF,EAAMM,Y,8BCyCrCC,EAA8C,SAACP,GAElD,IAAMQ,EAAmBC,EAAAA,KAAaC,MAAM,CAEzCC,eAAgBF,EAAAA,KACZG,IAAI,EAAG,sCACPC,IAAI,EAAG,uCACPC,SAAS,gBAShB,OACG,SAAC,KAAD,CACGC,cAAe,CACZJ,eAAgB,IAEnBH,iBAAkBA,EAClBQ,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,WAZJ,SAACD,GAEpBjB,EAAMmB,YAAYF,GAYZG,CAAcH,EAAON,gBACrBO,KARN,SAWI,kBACE,UAAC,KAAD,YACG,0BACG,SAAC,KAAD,CACGb,KAAM,iBACNgB,GAAI,WACJC,YAAa,oBAGnB,SAAC,KAAD,CAAcjB,KAAK,iBAAnB,SACIkB,EAAAA,KAGJ,mBAAQC,KAAM,SAAd,yBAOf,EAjFsC,SAACxB,GAEpC,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAazB,KAAMyB,EAAEzB,KAAMD,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OAEpF2B,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,SAAc2B,EAAE7B,OAGlF,OACG,iBAAKH,UAAWC,EAAhB,WAEG,gBAAKD,UAAWC,EAAhB,SACIyB,KAGJ,iBAAK1B,UAAWC,EAAhB,WAEG,yBAAM6B,KAEN,SAACxB,EAAD,CAAgBY,YAAanB,EAAMmB,qB,+CC7B3Ce,EAA6B,SAACT,GAC/B,MAAO,CACJU,OAAQV,EAAMW,KAAKD,SCCzB,IAYA,GALyBE,EAAAA,EAAAA,KACtBC,EAAAA,EAAAA,KARmB,SAACb,GACpB,MAAO,CACJC,YAAaD,EAAMC,gBAMf,UAAsBa,EAAAA,KDCzB,SACJC,GAcA,OAAOF,EAAAA,EAAAA,IAEJJ,EAA4B,GAFxBI,EAXiB,SAACtC,GAEtB,IAAKmC,EAAwBnC,EAAxBmC,OAAWM,EExBP,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAGlD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GAEpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,EFQH,CAA6B9C,EAA7B,GAEA,OAAKmC,GAIE,SAACK,GAAD,UAAsBC,KAHnB,SAAC,KAAD,CAAUtC,GAAI,gBCXLkC,CAGvBmB","sources":["webpack://my-app1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__qmkvT\",\"dialogsItems\":\"Dialogs_dialogsItems__QM0vS\",\"dialog\":\"Dialogs_dialog__2wck7\",\"massages\":\"Dialogs_massages__Ee1oJ\",\"massage\":\"Dialogs_massage__9KQWt\"};","//\r\nimport React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\n\r\ntype PropsType = {\r\n   id: number\r\n   name: string\r\n}\r\n\r\nconst DialogItems: React.FC<PropsType> = (props) => {\r\n   return (\r\n      <div className={s.dialog}>\r\n         <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default DialogItems\r\n","//\r\nimport React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = { message: string }\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n   return (\r\n      <div className={s.massage}>.. {props.message}</div>\r\n   )\r\n}\r\n\r\nexport default Message","//\r\nimport React, {FC} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItems from './DialogItems/DialogItems'\r\nimport Message from './Message/Message'\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\r\nimport {ErrorMessageWrapper} from '../../utils/validators/validators'\r\nimport * as Yup from 'yup'\r\nimport {InitialStateType} from '../../redux/dialogs-reducer'\r\n\r\n\r\ntype DialogsPropsType = {\r\n   dialogsPage: InitialStateType\r\n   sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst Dialogs: FC<DialogsPropsType> = (props) => {\r\n\r\n   let state = props.dialogsPage\r\n\r\n   let dialogsElement = state.sidebar.map(d => <DialogItems name={d.name} id={d.id} key={d.id} />)\r\n\r\n   let messagesElement = state.messages.map(m => <Message message={m.message} key={m.id} />)\r\n\r\n\r\n   return (\r\n      <div className={s.dialogs}>\r\n\r\n         <div className={s.dialogsItems}>\r\n            {dialogsElement}\r\n         </div>\r\n\r\n         <div className={s.massages}>\r\n\r\n            <div>{messagesElement}</div>\r\n\r\n            <AddMassageForm sendMessage={props.sendMessage} />\r\n\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\ntype AddMassageFormPropsType = {\r\n   sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst AddMassageForm: FC<AddMassageFormPropsType> = (props) => {\r\n\r\n   const validationSchema = Yup.object().shape({\r\n\r\n      newMessageBody: Yup.string()\r\n         .min(2, 'Must be longer than 2 characters !')\r\n         .max(5, 'Must be shorter than 5 characters !')\r\n         .required('Required !')\r\n   })\r\n\r\n   const addNewMessage = (values: string) => {\r\n\r\n      props.sendMessage(values)\r\n\r\n   }\r\n\r\n   return (\r\n      <Formik\r\n         initialValues={{\r\n            newMessageBody: ''\r\n         }}\r\n         validationSchema={validationSchema}\r\n         onSubmit={(values, {resetForm}) => {\r\n\r\n            addNewMessage(values.newMessageBody)\r\n            resetForm()\r\n         }}\r\n      >\r\n         {() => (\r\n            <Form>\r\n               <div>\r\n                  <Field\r\n                     name={'newMessageBody'}\r\n                     as={'textarea'}\r\n                     placeholder={'enter text 2'}\r\n                  />\r\n               </div>\r\n               <ErrorMessage name=\"newMessageBody\">\r\n                  {ErrorMessageWrapper}\r\n               </ErrorMessage>\r\n\r\n               <button type={'submit'}>Send</button>\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   )\r\n}\r\n\r\nexport default Dialogs\r\n\r\n\r\n//region Description\r\n// так было раньше без формика\r\n// onSubmit={(values) =>\r\n// addNewMessage( values )\r\n//\r\n// <div>\r\n//    <div>\r\n//                   <textarea value={newMessageBody}\r\n//                             onChange={onSendMessageChange}\r\n//                             placeholder='enter text'>\r\n//                   </textarea>\r\n//    </div>\r\n//\r\n//    <div>\r\n//       <button onClick={onSendMessageClick}>Send</button>\r\n//    </div>\r\n// </div>\r\n//\r\n// let onSendMessageClick = () => {\r\n//    props.sendMessage();\r\n// }\r\n//\r\n\r\n\r\n// type AddMassageFormValuesType = {\r\n//    newMessageBody: string\r\n// }\r\n// values: AddMassageFormValuesType\r\n// можно и не передавать оно само поняло что нужно\r\n\r\n// если что то конкретное хотим сбросить то пишем так\r\n// resetForm({values: {newMessageBody: ''}})\r\n// а иначе оно скидывает до инициализационного состояния\r\n\r\n//endregion\r\n\r\n\r\n","//\r\nimport React from 'react'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateGlobalType} from '../redux/redux-store'\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateGlobalType) => {\r\n   return {\r\n      isAuth: state.auth.isAuth\r\n   } // as MapPropsType // работает и без этого\r\n}\r\n\r\ntype MapPropsType = { isAuth: boolean }\r\n\r\ntype DispatchPropsType = {}\r\n\r\n// WCP это - WrappedComponentProps\r\n\r\nexport function withAuthRedirect<WCP>(\r\n   WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n   const RedirectComponent: React.FC<MapPropsType &\r\n      DispatchPropsType> = (props) => {\r\n\r\n      let {isAuth, ...restProps} = props\r\n\r\n      if (!isAuth) {\r\n         return <Navigate to={'/login'} />\r\n      }\r\n\r\n      return <WrappedComponent {...restProps as WCP} />\r\n   }\r\n\r\n   return connect<MapPropsType, DispatchPropsType,\r\n      WCP, AppStateGlobalType>(\r\n      mapStateToPropsForRedirect, {})(RedirectComponent)\r\n}\r\n\r\n\r\n//region Description\r\n// это полный код для понимания но оно ругается на избыточную переменную\r\n// let ConnectedAuthRedirectComponent = connect( mapStateToPropsForRedirect )( RedirectComponent );\r\n// return ConnectedAuthRedirectComponent;\r\n\r\n// или внутреннюю функцию можно функциональную сделать\r\n\r\n// такая короткая запись была\r\n// let mapStateToPropsForRedirect = (state) => ({\r\n//    isAuth: state.auth.isAuth\r\n// })\r\n//endregion\r\n\r\n","//\r\nimport React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {actions} from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {compose} from 'redux'\r\nimport {AppStateGlobalType} from '../../redux/redux-store'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\n\r\n\r\nlet mapStateToProps = (state: AppStateGlobalType) => {\r\n   return {\r\n      dialogsPage: state.dialogsPage\r\n   }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n   connect(mapStateToProps, {...actions}),\r\n   withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer\r\n\r\n\r\n//region Description\r\n// так было без compose\r\n//let AuthRedirectComponent = WithAuthRedirect( Dialogs );\r\n//\r\n// const DialogsContainer = connect( mapStateToProps, mapDispatchToProps )( AuthRedirectComponent );\r\n\r\n// так было без хок функции общей\r\n// let AuthRedirectComponent = (props) => {\r\n//\r\n//    if (!props.isAuth) {\r\n//       return <Navigate to={'/login'} />\r\n//    }\r\n//    return <Dialogs {...props} />\r\n// }\r\n\r\n// можно так сделать - как по мне так более понятнее\r\n// или как Дима сразу засунуть в сф\r\n// let onSendMessageClick = () => {\r\n//    dispatch( sendMessageCreator() )\r\n// }\r\n// в ретурне это\r\n// updateNewMessageBody: (body) => {\r\n//    dispatch( updateNewMessageBodyCreator( body ) );\r\n// },\r\n//sendMessage: onSendMessageClick\r\n\r\n// const DialogsContainer_Old = () => {\r\n//\r\n//    return (\r\n//\r\n//       <StoreContext_Non.Consumer>{\r\n//          (store) => {\r\n//\r\n//             let state = store.getState().dialogsPage;\r\n//\r\n//             let onSendMessageChange = (body) => {\r\n//                store.dispatch( updateNewMessageBodyCreator( body ) )\r\n//             }\r\n//\r\n//             let onSendMessageClick = () => {\r\n//                store.dispatch( sendMessageCreator() )\r\n//             }\r\n//\r\n//             return (\r\n//                <Dialogs\r\n//                   updateNewMessageBody={onSendMessageChange}\r\n//                   sendMessage={onSendMessageClick}\r\n//                   dialogsPage={state}\r\n//                />\r\n//             )\r\n//          }\r\n//       }\r\n//       </StoreContext_Non.Consumer>\r\n//    )\r\n// }\r\n\r\n// так было\r\n// let mapDispatchToProps = (dispatch) => {\r\n//\r\n//    return {\r\n//\r\n//       sendMessage: (newMessageBody) => {\r\n//          dispatch( actions.sendMessage( newMessageBody ) );\r\n//\r\n//       }\r\n//    }\r\n// }\r\n//endregion\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["props","className","s","to","id","name","message","AddMassageForm","validationSchema","Yup","shape","newMessageBody","min","max","required","initialValues","onSubmit","values","resetForm","sendMessage","addNewMessage","as","placeholder","ErrorMessageWrapper","type","state","dialogsPage","dialogsElement","sidebar","map","d","messagesElement","messages","m","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","Dialogs"],"sourceRoot":""}