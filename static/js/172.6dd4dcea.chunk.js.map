{"version":3,"file":"static/js/172.6dd4dcea.chunk.js","mappings":"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","sources":["webpack://my-app1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app1/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"photoBlock\":\"ProfileInfo_photoBlock__HpWgz\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rQo20\",\"userPhoto\":\"ProfileInfo_userPhoto__wxBp2\"};","//\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n   let [editMode, setEditMode] = useState( false );\r\n   let [status, setStatus] = useState( props.status );\r\n\r\n   useEffect( () => {\r\n      setStatus( props.status )\r\n   }, [props.status] )\r\n\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode( true );\r\n   }\r\n\r\n   const deActivateEditMode = () => {\r\n      setEditMode( false );\r\n      props.updateStatus( status );\r\n   }\r\n\r\n   const onStatusChange = (e) => {\r\n      setStatus( e.currentTarget.value )\r\n   }\r\n\r\n   return (\r\n      <div>\r\n\r\n         {!editMode &&\r\n         <div>\r\n            <span onDoubleClick={activateEditMode}>\r\n               {props.status}\r\n            </span>\r\n         </div>\r\n         }\r\n\r\n         {editMode &&\r\n         <div>\r\n            <input\r\n               autoFocus={true}\r\n               onBlur={deActivateEditMode}\r\n               onChange={onStatusChange}\r\n               value={status}\r\n            />\r\n         </div>\r\n         }\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import s from './ProfileInfo.module.css';\r\nimport React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n\r\n   if (!props.profile) {\r\n      return <Preloader />\r\n   }\r\n\r\n   let alt_descriptionBlock = `photo_${props.profile.userId}`;\r\n\r\n   const onMainPhotoSelected = (event) => {\r\n      if (event.target.files.length) {\r\n         props.savePhoto( event.target.files[0] )\r\n      }\r\n   }\r\n\r\n\r\n   return (\r\n      <div>\r\n\r\n         <div className={s.photoBlock}>\r\n            <img src='https://html5css.ru/css/img_forest.jpg' alt='photo555' />\r\n         </div>\r\n\r\n         <div className={s.descriptionBlock}>\r\n\r\n            <img src={props.profile.photos.small !== null\r\n               ? props.profile.photos.small\r\n               : userPhoto}\r\n                 className={styles.userPhoto}\r\n                 alt={alt_descriptionBlock}\r\n            />\r\n\r\n            ...Avatar + description и userId_ {props.profile.userId}\r\n\r\n            <div>\r\n               {props.isOwner\r\n               &&\r\n               <input\r\n                  type={'file'}\r\n                  onChange={onMainPhotoSelected}\r\n               />}\r\n            </div>\r\n\r\n\r\n            <ProfileStatusWithHooks\r\n               status={props.status}\r\n               updateStatus={props.updateStatus}\r\n            />\r\n\r\n         </div>\r\n\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__tpHam\",\"posts\":\"MyPosts_posts__sKDcq\",\"text_h3\":\"MyPosts_text_h3__wvADx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__C5ylc\"};","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n   return (\r\n\r\n      <div className={s.item}>\r\n         <img\r\n            src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ4AuCaCDS8eeLRXGL0pFD9cIddYuHc8AJoSA&usqp=CAU'\r\n            alt={'Post-illustration'}\r\n         />\r\n         ... {props.value}\r\n         <div>\r\n            Like {props.likesCount}\r\n         </div>\r\n      </div>\r\n\r\n   );\r\n}\r\n\r\nexport default Post;","//\r\nimport React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {ErrorMessageWrapper} from \"../../../utils/validators/validators\";\r\n\r\n\r\nconst MyPosts = props => {\r\n\r\n   // тут reverse - для теста\r\n   let postsElement =\r\n      [...props.posts]\r\n         .reverse()\r\n         .map( p => <Post value={p.message} likesCount={p.likesCount} key={p.id} /> );\r\n\r\n   return (\r\n      <div className={s.postsBlock}>\r\n\r\n         <h3 className={s.text_h3}>\r\n            My posts:\r\n         </h3>\r\n\r\n         <AddNewPostForm\r\n            addPost={props.addPost}\r\n         />\r\n\r\n         <div className={s.posts}>\r\n            {postsElement}\r\n         </div>\r\n\r\n      </div>\r\n   );\r\n};\r\n\r\n\r\nconst AddNewPostForm = (props) => {\r\n\r\n   const validationSchema = Yup.object().shape( {\r\n\r\n      newPostText: Yup.string()\r\n         .min( 2, \"Must be longer than 2 characters !\" )\r\n         .max( 5, \"Must be shorter than 5 characters !\" )\r\n         .required( \"Required !\" )\r\n   } );\r\n\r\n   const OnAddPost = (values) => {\r\n      props.addPost( values );\r\n   }\r\n\r\n   return (\r\n      <Formik\r\n         initialValues={{\r\n            newPostText: \"\"\r\n         }}\r\n         validationSchema={validationSchema}\r\n         onSubmit={(values, {resetForm}) => {\r\n            OnAddPost( values.newPostText );\r\n            resetForm( {values: ''} );\r\n         }}\r\n      >\r\n         {() => (\r\n            <Form>\r\n               <div>\r\n                  <Field\r\n                     name={'newPostText'}\r\n                     as={'textarea'}\r\n                     placeholder={'enter text 1'}\r\n                  />\r\n               </div>\r\n\r\n               <ErrorMessage name=\"newPostText\">\r\n                  {ErrorMessageWrapper}\r\n               </ErrorMessage>\r\n\r\n               <button type={'submit'}>Add posts</button>\r\n            </Form>\r\n         )}\r\n      </Formik>\r\n   )\r\n}\r\n\r\n\r\nexport default MyPosts;\r\n\r\n\r\n// так было раньше без формика\r\n//let newPostElement = React.createRef()\r\n\r\n// let OnAddPost = () => {\r\n//    props.addPost();\r\n// }\r\n//\r\n//\r\n// let onPostChange = () => {\r\n//    let text = newPostElement.current.value;\r\n//    props.updateNewPostText( text );\r\n// }\r\n\r\n// <div>\r\n//    <textarea ref={newPostElement}\r\n//              onChange={onPostChange}\r\n//              value={props.newPostText} />\r\n// </div>\r\n//\r\n// <div>\r\n//    <button onClick={OnAddPost}> Add posts\r\n//    </button>\r\n// </div>\r\n\r\n// let postsElement =\r\n//    props.posts.map( p => <Post value={p.message} likesCount={p.likesCount} key={p.id} /> );","//\r\nimport {connect} from \"react-redux\";\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n   return {\r\n      posts: state.profilePage.posts,\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n\r\n   return {\r\n\r\n      addPost: (newPostText) => {\r\n         dispatch( addPostActionCreator( newPostText ) );\r\n      }\r\n   }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect( mapStateToProps, mapDispatchToProps )( MyPosts );\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//\r\n//    return (\r\n//       <StoreContext_Non.Consumer>{\r\n//\r\n//          (store) => {\r\n//\r\n//             let state = store.getState();\r\n//\r\n//             let addPost = () => {\r\n//                store.dispatch( addPostActionCreator() );\r\n//             }\r\n//\r\n//             let onPostChange = (text) => {\r\n//                let action = updateNewPostTextActionCreator( text );\r\n//                store.dispatch( action );\r\n//             }\r\n//\r\n//             return (\r\n//                <MyPosts posts={state.profilePage.posts}\r\n//                         addPost={addPost}\r\n//                         updateNewPostText={onPostChange}\r\n//                         newPostText={state.profilePage.newPostText}\r\n//                />\r\n//             )\r\n//\r\n//          }\r\n//\r\n//       }\r\n//\r\n//       </StoreContext_Non.Consumer>\r\n//\r\n//    )\r\n// }\r\n\r\n","//\r\nimport React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nclass Profile extends React.Component {\r\n\r\n\r\n   render() {\r\n\r\n      return (\r\n         <div>\r\n            <ProfileInfo\r\n               {...this.props}\r\n            />\r\n            <MyPostsContainer\r\n            />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Profile;\r\n\r\n","//\r\nimport React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n   constructor(props) {\r\n      super( props );\r\n      this.state = {\r\n         isShowMyProfile: true\r\n      }\r\n   }\r\n\r\n\r\n   componentDidMount() {\r\n\r\n      let userIdFromPath = +this.props.router.params.userId;\r\n      let authorisedUserId = this.props.authorisedUserId;\r\n\r\n      if (userIdFromPath) {\r\n         //userId = 2;\r\n         //userId = 23275;\r\n         this.props.getUserProfile( userIdFromPath );\r\n         this.props.getStatus( userIdFromPath );\r\n\r\n      } else {\r\n\r\n         if (this.props.isAuth) {\r\n            this.props.getUserProfile( authorisedUserId );\r\n            this.props.getStatus( authorisedUserId );\r\n         }\r\n      }\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n      let userIdFromPath = +this.props.router.params.userId;\r\n      let authorisedUserId = this.props.authorisedUserId;\r\n      let isShowMyProfile = this.state.isShowMyProfile;\r\n\r\n      if (isShowMyProfile) {\r\n\r\n         if (userIdFromPath === authorisedUserId) {\r\n            this.setState( {isShowMyProfile: false} )\r\n         }\r\n\r\n         if (!userIdFromPath && this.props.isAuth) {\r\n            this.props.getUserProfile( authorisedUserId );\r\n            this.props.getStatus( authorisedUserId );\r\n            this.setState( {isShowMyProfile: false} )\r\n         }\r\n      }\r\n   }\r\n\r\n\r\n   render() {\r\n\r\n      if (!this.props.isAuth && !this.props.router.params.userId) {\r\n         return <Navigate to={'/login'} />\r\n      }\r\n\r\n      let userIdFromPath = +this.props.router.params.userId;\r\n      let authorisedUserId = this.props.authorisedUserId;\r\n\r\n      //debugger\r\n\r\n      let isOwner = false;\r\n      if (!userIdFromPath && this.props.isAuth) {\r\n         isOwner = true;\r\n      } else if (userIdFromPath === authorisedUserId) {\r\n         isOwner = true;\r\n      }\r\n\r\n\r\n      return (\r\n         <div>\r\n            <Profile\r\n               profile={this.props.profile}\r\n               status={this.props.status}\r\n               updateStatus={this.props.updateStatus}\r\n               isOwner={isOwner}\r\n               savePhoto={this.props.savePhoto}\r\n            />\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\n\r\n// wrapper to use react router's v6 hooks in class component (to use HOC pattern, like in router v5)\r\nfunction withRouter(Component) {\r\n\r\n   function ComponentWithRouterProp(props) {\r\n      let location = useLocation();\r\n      let navigate = useNavigate();\r\n      let params = useParams();\r\n\r\n      return <Component\r\n         {...props}\r\n         router={{location, navigate, params}} />;\r\n   }\r\n\r\n   return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n\r\n\r\n   return {\r\n      profile: state.profilePage.profile,\r\n      status: state.profilePage.status,\r\n      authorisedUserId: state.auth.id,\r\n      isAuth: state.auth.isAuth\r\n   }\r\n}\r\n\r\n\r\nconst ProfileContainerCompose = compose(\r\n   withRouter,\r\n   connect( mapStateToProps,\r\n      {getUserProfile, getStatus, updateStatus, savePhoto} )\r\n)( ProfileContainer );\r\n\r\nexport default ProfileContainerCompose;\r\n\r\n\r\n//fake: state.usersPage.fake\r\n\r\n//setTimeout( () => {\r\n//this.props.getStatus( userId );\r\n//}, 2000 )\r\n\r\n// так было без compose\r\n//let AuthRedirectComponent = WithAuthRedirect( ProfileContainer );\r\n//\r\n// export default connect( mapStateToProps, {\r\n//    getUserProfile\r\n// } )( withRouter( AuthRedirectComponent ) );\r\n\r\n// так было без хок функции общей\r\n// let AuthRedirectComponent = (props) => {\r\n//\r\n//    if (!props.isAuth) {\r\n//       return <Navigate to={'/login'} />\r\n//    }\r\n//    return <ProfileContainer {...props} />\r\n// }\r\n\r\n// так было без withRouter\r\n// export default connect( mapStateToProps, {\r\n//    setUserProfile\r\n// } )( ProfileContainer );\r\n\r\n// <Profile {...this.props} - это нужно что бы то что идет сверху\r\n// не потерялось\r\n// {/*можно и не передавать оно вроде как автоматом прокидывается */}\r\n\r\n// if (!this.props.isAuth) {\r\n//    return <Navigate to={'/login'} />\r\n// }\r\n\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","profile","Preloader","alt_descriptionBlock","userId","className","s","src","alt","photos","small","userPhoto","styles","isOwner","type","event","target","files","length","savePhoto","likesCount","AddNewPostForm","validationSchema","Yup","shape","newPostText","min","max","required","initialValues","onSubmit","values","resetForm","addPost","OnAddPost","name","as","placeholder","ErrorMessageWrapper","postsElement","posts","reverse","map","p","message","id","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","Profile","this","React","ProfileContainer","isShowMyProfile","userIdFromPath","router","params","authorisedUserId","getUserProfile","getStatus","isAuth","prevProps","prevState","snapshot","setState","to","compose","Component","location","useLocation","navigate","useNavigate","useParams","auth"],"sourceRoot":""}